/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.View;

import BLL.Medicine;
import BLL.Orders;
import BLL.Supplier;
import DAL.MedicineRepository;
import DAL.OrderRepository;
import DAL.PharmacyException;
import DAL.SupplierRepository;
import gui.Model.MedicineComboBoxModel;
import gui.Model.OrderTableModel;
import gui.Model.SupplierComboBoxModel;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Laris
 */
public class OrderForm extends javax.swing.JInternalFrame {

    private static boolean exists = false;

    OrderRepository or = new OrderRepository();
    OrderTableModel otm = new OrderTableModel();

    SupplierRepository sr = new SupplierRepository();
    SupplierComboBoxModel scbm;

    MedicineRepository mr = new MedicineRepository();
    MedicineComboBoxModel mcbm;

    /**
     * Creates new form OrderForm
     */
    public OrderForm() {
        initComponents();
        loadTable();
        loadComboBoxes();
        tableSelectedIndexChange();
        exists = true;
    }

    public static boolean isExists() {
        return exists;
    }

    public static void setExists(boolean exists) {
        OrderForm.exists = exists;
    }

    public void loadTable() {
        try {
            List<Orders> list = or.findAll();
            otm.addList(list);
            table.setModel(otm);
            otm.fireTableDataChanged();
        } catch (PharmacyException pe) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, pe);
        }
    }

    public void tableSelectedIndexChange() {
        final ListSelectionModel rowSM = table.getSelectionModel();
        rowSM.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent lse) {
                if (lse.getValueIsAdjusting()) {
                    return;
                }

                ListSelectionModel rowSM = (ListSelectionModel) lse.getSource();
                int selectedIndex = rowSM.getAnchorSelectionIndex();
                if (selectedIndex > -1) {
                    Orders o = otm.getOrders(selectedIndex);
                    idTxt.setText(o.getOrderID() + "");
                    supplierComboBox.setSelectedItem(o.getSupplierID());
                    supplierComboBox.repaint();
                    medicineComboBox.setSelectedItem(o.getMedicineID());
                    medicineComboBox.repaint();
                    quantityTxt.setText(o.getQuantity() + "");
                }
            }
        });
    }

    public void loadComboBoxes() {
        try {
            List<Supplier> supplierList = sr.findAll();
            scbm = new SupplierComboBoxModel(supplierList);
            supplierComboBox.setModel(scbm);
            supplierComboBox.repaint();

            List<Medicine> medicineList = mr.findAll();
            mcbm = new MedicineComboBoxModel(medicineList);
            medicineComboBox.setModel(mcbm);
            medicineComboBox.repaint();

        } catch (PharmacyException pe) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, pe);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        idTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        supplierComboBox = new javax.swing.JComboBox();
        medicineComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        quantityTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cancelBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();

        setClosable(true);
        setTitle("Order");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        idTxt.setEditable(false);
        idTxt.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setText("Order ID");

        jLabel2.setText("Supplier");

        supplierComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        medicineComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Medicine");

        jLabel4.setText("Quantity");

        cancelBtn.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        cancelBtn.setText("Clear");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(255, 0, 0));
        deleteBtn.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        saveBtn.setBackground(new java.awt.Color(0, 102, 255));
        saveBtn.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        saveBtn.setForeground(new java.awt.Color(255, 255, 255));
        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(idTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(supplierComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(medicineComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(quantityTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(medicineComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantityTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveBtn)
                        .addGap(86, 86, 86)
                        .addComponent(deleteBtn)
                        .addGap(86, 86, 86)
                        .addComponent(cancelBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        int row = table.getSelectedRow();
        if (!(supplierComboBox.getSelectedItem() == null || medicineComboBox.getSelectedItem() == null
                || quantityTxt.getText().equals(""))) {
            if (row == -1) {
                Orders o = new Orders();
                o.setSupplierID((Supplier) supplierComboBox.getSelectedItem());
                o.setMedicineID((Medicine) medicineComboBox.getSelectedItem());
                o.setOrderDate(Date.valueOf(LocalDate.now()));
                try {
                    o.setPrice(((Medicine) medicineComboBox.getSelectedItem()).getPrice() * Integer.parseInt(quantityTxt.getText()));
                    if (quantityTxt.getText().matches("^[1-9]\\d*$")) {
                        o.setQuantity(Integer.parseInt(quantityTxt.getText()));
                    } else {
                        JOptionPane.showMessageDialog(this, "Please enter a valid quantity!");
                        return;
                    }
                    or.create(o);
                } catch (PharmacyException ex) {
                    JOptionPane.showMessageDialog(this, "MSG: " + ex.getMessage());
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid quantity!");
                    return;
                }
            } else {
                Orders o = otm.getOrders(row);
                o.setSupplierID((Supplier) supplierComboBox.getSelectedItem());
                o.setMedicineID((Medicine) medicineComboBox.getSelectedItem());
                o.setOrderDate(Date.valueOf(LocalDate.now()));
                try {
                    if (quantityTxt.getText().matches("^[1-9]\\d*$")) {
                        o.setQuantity(Integer.parseInt(quantityTxt.getText()));
                    } else {
                        JOptionPane.showMessageDialog(this, "Please enter a valid quantity!");
                        return;
                    }
                    o.setPrice(((Medicine) medicineComboBox.getSelectedItem()).getPrice() * Integer.parseInt(quantityTxt.getText()));
                    or.edit(o);
                } catch (PharmacyException ex) {
                    JOptionPane.showMessageDialog(this, "MSG: " + ex.getMessage());
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid quantity!");
                    return;
                }
            }
            loadTable();
            clear();
        } else {
            JOptionPane.showMessageDialog(this, "Please fill in required fields!");
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    public void printOrderInvoice(Orders o) {
        try {
            Supplier supplier = o.getSupplierID();
            SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy");
            String strDate = formatter.format(Date.valueOf(LocalDate.now()));
            File folder = new File("C://PMS Orders");
            if (!folder.exists()) {
                folder.mkdir();
            }
            File file = new File("C://PMS Orders//" + " - " + supplier.getName() + ".txt");
            if (!file.exists()) {
                file.createNewFile();
            }    
            FileWriter fw = new FileWriter(file, true);
            PrintWriter pw = new PrintWriter(fw);
            
            pw.println(o.toString());
            pw.close();
            
        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public boolean isInt(String str) {
        try {
            Integer.parseInt(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    public boolean isDouble(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        clear();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        exists = false;
    }//GEN-LAST:event_formInternalFrameClosed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (evt.getClickCount() > 0) {
            try {
                this.setSelected(true);
                this.toFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(SalesForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_formMouseClicked

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        int row = table.getSelectedRow();
        if (row > -1) {
            Object[] obj = {"Yes", "No"};
            int i = JOptionPane.showOptionDialog(this, "Do you want to delete order?", "Delete",
                    JOptionPane.OK_OPTION, JOptionPane.QUESTION_MESSAGE, null, obj, obj[0]);
            if (i == 0) {
                try {
                    Orders p = otm.getOrders(row);
                    or.delete(p);
                    clear();
                    loadTable();
                } catch (PharmacyException pe) {
                    JOptionPane.showMessageDialog(this, "MSG: " + pe.getMessage());
                }
            } else {
                clear();
            }
        } else {
            JOptionPane.showMessageDialog(this, "You havent selected anything to delete");
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    public void clear() {
        idTxt.setText("");
        supplierComboBox.setSelectedIndex(-1);
        supplierComboBox.repaint();
        medicineComboBox.setSelectedIndex(-1);
        medicineComboBox.repaint();
        quantityTxt.setText("");
        table.clearSelection();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextField idTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox medicineComboBox;
    private javax.swing.JTextField quantityTxt;
    private javax.swing.JButton saveBtn;
    private javax.swing.JComboBox supplierComboBox;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
